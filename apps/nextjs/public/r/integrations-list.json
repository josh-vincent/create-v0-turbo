{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "integrations-list",
  "type": "registry:ui",
  "title": "Integrations List",
  "description": "Complete integrations management UI. Shows connected and available OAuth providers.",
  "dependencies": [],
  "registryDependencies": ["connect-button"],
  "files": [
    {
      "path": "registry/new-york/ui/integrations-list/integrations-list.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { api } from \"@tocld/api/client\";\nimport { cn } from \"@tocld/ui/lib\";\nimport { ConnectButton } from \"./connect-button\";\nimport { IntegrationCard } from \"./integration-card\";\nimport type { IntegrationProvider } from \"../types\";\n\ninterface IntegrationsListProps {\n  className?: string;\n}\n\nconst AVAILABLE_PROVIDERS: IntegrationProvider[] = [\n  \"gmail\",\n  \"outlook\",\n  \"google_drive\",\n  \"dropbox\",\n  \"slack\",\n  \"github\",\n];\n\n/**\n * List of integrations with connect/manage options\n */\nexport function IntegrationsList({ className }: IntegrationsListProps) {\n  const { data: integrations, isLoading, refetch } = api.integration.list.useQuery();\n\n  const connectedProviders = new Set(\n    integrations?.map((int) => int.provider) || [],\n  );\n\n  const availableProviders = AVAILABLE_PROVIDERS.filter(\n    (provider) => !connectedProviders.has(provider),\n  );\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"space-y-4\", className)}>\n        <p>Loading integrations...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-8\", className)}>\n      {/* Connected integrations */}\n      {integrations && integrations.length > 0 && (\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\">Connected</h2>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {integrations.map((integration) => (\n              <IntegrationCard\n                key={integration.id}\n                integration={integration}\n                onDisconnect={() => refetch()}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Available integrations */}\n      {availableProviders.length > 0 && (\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\">Available</h2>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {availableProviders.map((provider) => (\n              <div\n                key={provider}\n                className=\"p-6 border rounded-lg flex flex-col items-center justify-center space-y-3\"\n              >\n                <h3 className=\"text-lg font-medium capitalize\">{provider}</h3>\n                <ConnectButton\n                  provider={provider}\n                  onSuccess={() => refetch()}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {!integrations?.length && !availableProviders.length && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">No integrations available</p>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/ui/integrations-list/integration-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { api } from \"@tocld/api/client\";\nimport { cn } from \"@tocld/ui/lib\";\nimport type { IntegrationInfo } from \"../types\";\n\ninterface IntegrationCardProps {\n  integration: IntegrationInfo;\n  onDisconnect?: () => void;\n  className?: string;\n}\n\n/**\n * Display integration status with management options\n */\nexport function IntegrationCard({\n  integration,\n  onDisconnect,\n  className,\n}: IntegrationCardProps) {\n  const disconnectMutation = api.integration.disconnect.useMutation();\n  const refreshMutation = api.integration.refresh.useMutation();\n\n  const handleDisconnect = async () => {\n    if (!confirm(`Disconnect ${integration.provider}?`)) return;\n\n    try {\n      await disconnectMutation.mutateAsync({\n        integrationId: integration.id,\n      });\n      onDisconnect?.();\n    } catch (error) {\n      console.error(\"Disconnect error:\", error);\n    }\n  };\n\n  const handleRefresh = async () => {\n    try {\n      await refreshMutation.mutateAsync({\n        integrationId: integration.id,\n      });\n    } catch (error) {\n      console.error(\"Refresh error:\", error);\n    }\n  };\n\n  return (\n    <div className={cn(\"p-6 border rounded-lg space-y-4\", className)}>\n      <div className=\"flex items-start justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold capitalize\">\n            {integration.provider}\n          </h3>\n          {integration.accountEmail && (\n            <p className=\"text-sm text-muted-foreground\">\n              {integration.accountEmail}\n            </p>\n          )}\n        </div>\n        <span\n          className={cn(\n            \"px-2 py-1 text-xs font-medium rounded-full\",\n            integration.status === \"connected\" &&\n              \"bg-green-100 text-green-700\",\n            integration.status === \"disconnected\" &&\n              \"bg-gray-100 text-gray-700\",\n            integration.status === \"error\" && \"bg-red-100 text-red-700\",\n            integration.status === \"expired\" && \"bg-yellow-100 text-yellow-700\",\n          )}\n        >\n          {integration.status}\n        </span>\n      </div>\n\n      <div className=\"space-y-1 text-sm\">\n        <div className=\"flex justify-between\">\n          <span className=\"text-muted-foreground\">Connected</span>\n          <span className=\"font-medium\">\n            {new Date(integration.connectedAt).toLocaleDateString()}\n          </span>\n        </div>\n        {integration.lastSyncedAt && (\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Last synced</span>\n            <span className=\"font-medium\">\n              {new Date(integration.lastSyncedAt).toLocaleDateString()}\n            </span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex gap-2 pt-2\">\n        <button\n          type=\"button\"\n          onClick={handleRefresh}\n          disabled={refreshMutation.isPending}\n          className=\"px-4 py-2 border rounded-md hover:bg-accent text-sm font-medium\"\n        >\n          {refreshMutation.isPending ? \"Refreshing...\" : \"Refresh\"}\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleDisconnect}\n          disabled={disconnectMutation.isPending}\n          className=\"px-4 py-2 border border-red-200 text-red-600 rounded-md hover:bg-red-50 text-sm font-medium\"\n        >\n          {disconnectMutation.isPending ? \"Disconnecting...\" : \"Disconnect\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ],
  "categories": ["integration", "dashboard"]
}
