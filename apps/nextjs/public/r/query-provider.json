{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "query-provider",
  "type": "registry:ui",
  "title": "Query Provider",
  "description": "TanStack Query provider with offline persistence support for both web and native.",
  "dependencies": ["@tanstack/react-query", "@tanstack/react-query-persist-client"],
  "devDependencies": ["@tanstack/react-query-devtools"],
  "files": [
    {
      "path": "registry/new-york/ui/query-provider.ts",
      "content": "/**\n * Query Provider - Shared types and configuration\n * This file contains the shared logic for TanStack Query setup with offline support\n */\nimport type { QueryClient } from \"@tanstack/react-query\";\n\nexport interface QueryProviderProps {\n  children: React.ReactNode;\n  queryClient?: QueryClient;\n}\n\nexport interface OfflineQueryConfig {\n  /** Maximum age of cached data in milliseconds (default: 24 hours) */\n  maxAge?: number;\n  /** Whether to restore queries on mount (default: true) */\n  shouldDehydrateQuery?: (query: any) => boolean;\n  /** Throttle time for persisting in milliseconds (default: 1000ms) */\n  throttleTime?: number;\n}\n\nexport const defaultOfflineConfig: OfflineQueryConfig = {\n  maxAge: 1000 * 60 * 60 * 24, // 24 hours\n  throttleTime: 1000,\n  shouldDehydrateQuery: (query) => {\n    // Don't persist queries with errors or empty data\n    return query.state.status === \"success\" && query.state.data != null;\n  },\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/new-york/ui/query-provider.tsx",
      "content": "/**\n * Query Provider - Web implementation\n * Uses localStorage for persistence with sync storage persister\n */\n\"use client\";\n\nimport * as React from \"react\";\nimport {\n  QueryClient,\n  QueryClientProvider,\n  type QueryCache,\n} from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { PersistQueryClientProvider } from \"@tanstack/react-query-persist-client\";\nimport { createSyncStoragePersister } from \"@tanstack/query-sync-storage-persister\";\nimport type { QueryProviderProps, OfflineQueryConfig } from \"./query-provider\";\nimport { defaultOfflineConfig } from \"./query-provider\";\n\nexport type { QueryProviderProps, OfflineQueryConfig };\n\ninterface WebQueryProviderProps extends QueryProviderProps {\n  config?: OfflineQueryConfig;\n  enableDevtools?: boolean;\n}\n\n// Create persister using localStorage\nconst createPersister = () => {\n  if (typeof window === \"undefined\") return undefined;\n\n  return createSyncStoragePersister({\n    storage: window.localStorage,\n    key: \"REACT_QUERY_OFFLINE_CACHE\",\n  });\n};\n\n// Default query client configuration\nconst createDefaultQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: 1000 * 60 * 5, // 5 minutes\n        gcTime: 1000 * 60 * 60 * 24, // 24 hours (formerly cacheTime)\n        refetchOnWindowFocus: true,\n        refetchOnReconnect: true,\n        retry: 1,\n      },\n      mutations: {\n        retry: 1,\n      },\n    },\n  });\n\nexport function QueryProvider({\n  children,\n  queryClient,\n  config = defaultOfflineConfig,\n  enableDevtools = process.env.NODE_ENV === \"development\",\n}: WebQueryProviderProps) {\n  const [client] = React.useState(() => queryClient ?? createDefaultQueryClient());\n  const persister = React.useMemo(() => createPersister(), []);\n\n  if (!persister) {\n    // SSR or persister not available\n    return (\n      <QueryClientProvider client={client}>\n        {children}\n        {enableDevtools && <ReactQueryDevtools initialIsOpen={false} />}\n      </QueryClientProvider>\n    );\n  }\n\n  return (\n    <PersistQueryClientProvider\n      client={client}\n      persistOptions={{\n        persister,\n        maxAge: config.maxAge,\n        dehydrateOptions: {\n          shouldDehydrateQuery: config.shouldDehydrateQuery,\n        },\n      }}\n    >\n      {children}\n      {enableDevtools && <ReactQueryDevtools initialIsOpen={false} />}\n    </PersistQueryClientProvider>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/ui/query-provider.native.tsx",
      "content": "/**\n * Query Provider - Native implementation\n * Uses AsyncStorage for persistence with async storage persister\n */\nimport * as React from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport {\n  QueryClient,\n  QueryClientProvider,\n} from \"@tanstack/react-query\";\nimport { PersistQueryClientProvider } from \"@tanstack/react-query-persist-client\";\nimport { createAsyncStoragePersister } from \"@tanstack/query-async-storage-persister\";\nimport type { QueryProviderProps, OfflineQueryConfig } from \"./query-provider\";\nimport { defaultOfflineConfig } from \"./query-provider\";\n\nexport type { QueryProviderProps, OfflineQueryConfig };\n\ninterface NativeQueryProviderProps extends QueryProviderProps {\n  config?: OfflineQueryConfig;\n}\n\n// Create persister using AsyncStorage\nconst createPersister = () => {\n  return createAsyncStoragePersister({\n    storage: AsyncStorage,\n    key: \"REACT_QUERY_OFFLINE_CACHE\",\n  });\n};\n\n// Default query client configuration\nconst createDefaultQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: 1000 * 60 * 5, // 5 minutes\n        gcTime: 1000 * 60 * 60 * 24, // 24 hours (formerly cacheTime)\n        refetchOnWindowFocus: false, // Not applicable on mobile\n        refetchOnReconnect: true,\n        retry: 1,\n      },\n      mutations: {\n        retry: 1,\n      },\n    },\n  });\n\nexport function QueryProvider({\n  children,\n  queryClient,\n  config = defaultOfflineConfig,\n}: NativeQueryProviderProps) {\n  const [client] = React.useState(() => queryClient ?? createDefaultQueryClient());\n  const persister = React.useMemo(() => createPersister(), []);\n\n  return (\n    <PersistQueryClientProvider\n      client={client}\n      persistOptions={{\n        persister,\n        maxAge: config.maxAge,\n        dehydrateOptions: {\n          shouldDehydrateQuery: config.shouldDehydrateQuery,\n        },\n      }}\n    >\n      {children}\n    </PersistQueryClientProvider>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}
